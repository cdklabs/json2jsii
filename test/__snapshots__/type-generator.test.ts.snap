// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`camel casing 1`] = `
"/**
 * @schema fqn.of.TestType
 */
export interface TestType {
  /**
   * @schema fqn.of.TestType#CamelCase1
   */
  readonly camelCase1?: string;

  /**
   * @schema fqn.of.TestType#Camel_Case2
   */
  readonly camelCase2?: string;

  /**
   * @schema fqn.of.TestType#camel_case_3
   */
  readonly camelCase3?: string;

  /**
   * @schema fqn.of.TestType#CAMEL_CASE_4
   */
  readonly camelCase4?: string;

  /**
   * @schema fqn.of.TestType#camel-case-5
   */
  readonly camelCase5?: string;

}

/**
 * Converts an object of type 'TestType' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_TestType(obj: TestType | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'CamelCase1': obj.camelCase1,
    'Camel_Case2': obj.camelCase2,
    'camel_case_3': obj.camelCase3,
    'CAMEL_CASE_4': obj.camelCase4,
    'camel-case-5': obj.camelCase5,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */
"
`;

exports[`documentation "*/" is is escaped 1`] = `
"/**
 * @schema fqn.of.TestType
 */
export interface TestType {
  /**
   * hello _/world
   *
   * @schema fqn.of.TestType#field
   */
  readonly field?: string;

}

/**
 * Converts an object of type 'TestType' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_TestType(obj: TestType | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'field': obj.field,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */
"
`;

exports[`documentation does not render if not defined 1`] = `
"/**
 * @schema fqn.of.TestType
 */
export interface TestType {
  /**
   * @schema fqn.of.TestType#field
   */
  readonly field?: boolean;

}

/**
 * Converts an object of type 'TestType' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_TestType(obj: TestType | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'field': obj.field,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */
"
`;

exports[`documentation renders based on description 1`] = `
"/**
 * @schema fqn.of.TestType
 */
export interface TestType {
  /**
   * hello, description
   *
   * @schema fqn.of.TestType#field
   */
  readonly field?: string;

}

/**
 * Converts an object of type 'TestType' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_TestType(obj: TestType | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'field': obj.field,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */
"
`;

exports[`enums renders a typescript enum 1`] = `
"/**
 * @schema fqn.of.TestType
 */
export interface TestType {
  /**
   * description of first enum
   *
   * @schema fqn.of.TestType#firstEnum
   */
  readonly firstEnum: FqnOfTestTypeFirstEnum;

  /**
   * @schema fqn.of.TestType#child
   */
  readonly child?: FqnOfTestTypeChild;

}

/**
 * Converts an object of type 'TestType' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_TestType(obj: TestType | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'firstEnum': obj.firstEnum,
    'child': toJson_FqnOfTestTypeChild(obj.child),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * description of first enum
 *
 * @schema FqnOfTestTypeFirstEnum
 */
export enum FqnOfTestTypeFirstEnum {
  /** value1 */
  VALUE1 = 'value1',
  /** value2 */
  VALUE2 = 'value2',
  /** value-of-three */
  VALUE_OF_THREE = 'value-of-three',
  /** valueOfFour */
  VALUE_OF_FOUR = 'valueOfFour',
}

/**
 * @schema FqnOfTestTypeChild
 */
export interface FqnOfTestTypeChild {
  /**
   * description of second enum
   *
   * @schema FqnOfTestTypeChild#secondEnum
   */
  readonly secondEnum?: FqnOfTestTypeChildSecondEnum;

}

/**
 * Converts an object of type 'FqnOfTestTypeChild' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_FqnOfTestTypeChild(obj: FqnOfTestTypeChild | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'secondEnum': obj.secondEnum,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * description of second enum
 *
 * @schema FqnOfTestTypeChildSecondEnum
 */
export enum FqnOfTestTypeChildSecondEnum {
  /** hey */
  HEY = 'hey',
  /** enum values can be crazy */
  ENUM_VALUES_CAN_BE_CRAZY = 'enum values can be crazy',
  /** yes>>123 */
  YES_123 = 'yes>>123',
}
"
`;

exports[`enums without type implies "string" 1`] = `
"/**
 * @schema fqn.of.TestType
 */
export interface TestType {
  /**
   * @schema fqn.of.TestType#Color
   */
  readonly color?: FqnOfTestTypeColor;

}

/**
 * Converts an object of type 'TestType' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_TestType(obj: TestType | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'Color': obj.color,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema FqnOfTestTypeColor
 */
export enum FqnOfTestTypeColor {
  /** red */
  RED = 'red',
  /** green */
  GREEN = 'green',
  /** blue */
  BLUE = 'blue',
}
"
`;

exports[`forStruct 1`] = `
"/**
 * A resource that creates Amazon Elastic Kubernetes Service (Amazon EKS) clusters.
 *
 * @schema EksProps
 */
export interface EksProps {
  /**
   * A unique name for your cluster.
   *
   * @schema EksProps#Name
   */
  readonly name?: string;

  /**
   * Amazon Resource Name (ARN) of the AWS Identity and Access Management (IAM) role. This provides permissions for Amazon EKS to call other AWS APIs.
   *
   * @schema EksProps#RoleArn
   */
  readonly roleArn: string;

  /**
   * Name of the AWS Identity and Access Management (IAM) role used for clusters that have the public endpoint disabled. this provides permissions for Lambda to be invoked and attach to the cluster VPC
   *
   * @schema EksProps#LambdaRoleName
   */
  readonly lambdaRoleName?: string;

  /**
   * Desired Kubernetes version for your cluster. If you don't specify this value, the cluster uses the latest version from Amazon EKS.
   *
   * @schema EksProps#Version
   */
  readonly version?: string;

  /**
   * Network configuration for Amazon EKS cluster.
   *
   *
   *
   * @schema EksProps#KubernetesNetworkConfig
   */
  readonly kubernetesNetworkConfig?: EksPropsKubernetesNetworkConfig;

  /**
   * An object that represents the virtual private cloud (VPC) configuration to use for an Amazon EKS cluster.
   *
   * @schema EksProps#ResourcesVpcConfig
   */
  readonly resourcesVpcConfig: EksPropsResourcesVpcConfig;

  /**
   * Enables exporting of logs from the Kubernetes control plane to Amazon CloudWatch Logs. By default, logs from the cluster control plane are not exported to CloudWatch Logs. The valid log types are api, audit, authenticator, controllerManager, and scheduler.
   *
   * @schema EksProps#EnabledClusterLoggingTypes
   */
  readonly enabledClusterLoggingTypes?: string[];

  /**
   * Encryption configuration for the cluster.
   *
   * @schema EksProps#EncryptionConfig
   */
  readonly encryptionConfig?: EncryptionConfigEntry[];

  /**
   * @schema EksProps#KubernetesApiAccess
   */
  readonly kubernetesApiAccess?: EksPropsKubernetesApiAccess;

  /**
   * ARN of the cluster (e.g., \`arn:aws:eks:us-west-2:666666666666:cluster/prod\`).
   *
   * @schema EksProps#Arn
   */
  readonly arn?: string;

  /**
   * Certificate authority data for your cluster.
   *
   * @schema EksProps#CertificateAuthorityData
   */
  readonly certificateAuthorityData?: string;

  /**
   * Security group that was created by Amazon EKS for your cluster. Managed-node groups use this security group for control-plane-to-data-plane communications.
   *
   * @schema EksProps#ClusterSecurityGroupId
   */
  readonly clusterSecurityGroupId?: string;

  /**
   * Endpoint for your Kubernetes API server (e.g., https://5E1D0CEXAMPLEA591B746AFC5AB30262.yl4.us-west-2.eks.amazonaws.com).
   *
   * @schema EksProps#Endpoint
   */
  readonly endpoint?: string;

  /**
   * ARN or alias of the customer master key (CMK).
   *
   * @schema EksProps#EncryptionConfigKeyArn
   */
  readonly encryptionConfigKeyArn?: string;

  /**
   * Issuer URL for the OpenID Connect identity provider.
   *
   * @schema EksProps#OIDCIssuerURL
   */
  readonly oidcIssuerUrl?: string;

  /**
   * @schema EksProps#Tags
   */
  readonly tags?: EksPropsTags[];

}

/**
 * Converts an object of type 'EksProps' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_EksProps(obj: EksProps | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'Name': obj.name,
    'RoleArn': obj.roleArn,
    'LambdaRoleName': obj.lambdaRoleName,
    'Version': obj.version,
    'KubernetesNetworkConfig': toJson_EksPropsKubernetesNetworkConfig(obj.kubernetesNetworkConfig),
    'ResourcesVpcConfig': toJson_EksPropsResourcesVpcConfig(obj.resourcesVpcConfig),
    'EnabledClusterLoggingTypes': obj.enabledClusterLoggingTypes?.map(y => y),
    'EncryptionConfig': obj.encryptionConfig?.map(y => toJson_EncryptionConfigEntry(y)),
    'KubernetesApiAccess': toJson_EksPropsKubernetesApiAccess(obj.kubernetesApiAccess),
    'Arn': obj.arn,
    'CertificateAuthorityData': obj.certificateAuthorityData,
    'ClusterSecurityGroupId': obj.clusterSecurityGroupId,
    'Endpoint': obj.endpoint,
    'EncryptionConfigKeyArn': obj.encryptionConfigKeyArn,
    'OIDCIssuerURL': obj.oidcIssuerUrl,
    'Tags': obj.tags?.map(y => toJson_EksPropsTags(y)),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Network configuration for Amazon EKS cluster.
 *
 *
 *
 * @schema EksPropsKubernetesNetworkConfig
 */
export interface EksPropsKubernetesNetworkConfig {
  /**
   * Specify the range from which cluster services will receive IPv4 addresses.
   *
   * @schema EksPropsKubernetesNetworkConfig#ServiceIpv4Cidr
   */
  readonly serviceIpv4Cidr?: string;

}

/**
 * Converts an object of type 'EksPropsKubernetesNetworkConfig' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_EksPropsKubernetesNetworkConfig(obj: EksPropsKubernetesNetworkConfig | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'ServiceIpv4Cidr': obj.serviceIpv4Cidr,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * An object that represents the virtual private cloud (VPC) configuration to use for an Amazon EKS cluster.
 *
 * @schema EksPropsResourcesVpcConfig
 */
export interface EksPropsResourcesVpcConfig {
  /**
   * Specify one or more security groups for the cross-account elastic network interfaces that Amazon EKS creates to use to allow communication between your worker nodes and the Kubernetes control plane. If you don't specify a security group, the default security group for your VPC is used.
   *
   * @schema EksPropsResourcesVpcConfig#SecurityGroupIds
   */
  readonly securityGroupIds?: string[];

  /**
   * Specify subnets for your Amazon EKS worker nodes. Amazon EKS creates cross-account elastic network interfaces in these subnets to allow communication between your worker nodes and the Kubernetes control plane.
   *
   * @schema EksPropsResourcesVpcConfig#SubnetIds
   */
  readonly subnetIds: string[];

  /**
   * Set this value to false to disable public access to your cluster's Kubernetes API server endpoint. If you disable public access, your cluster's Kubernetes API server can only receive requests from within the cluster VPC. The default value for this parameter is true , which enables public access for your Kubernetes API server.
   *
   * @schema EksPropsResourcesVpcConfig#EndpointPublicAccess
   */
  readonly endpointPublicAccess?: boolean;

  /**
   * Set this value to true to enable private access for your cluster's Kubernetes API server endpoint. If you enable private access, Kubernetes API requests from within your cluster's VPC use the private VPC endpoint. The default value for this parameter is false , which disables private access for your Kubernetes API server. If you disable private access and you have worker nodes or AWS Fargate pods in the cluster, then ensure that publicAccessCidrs includes the necessary CIDR blocks for communication with the worker nodes or Fargate pods.
   *
   * @schema EksPropsResourcesVpcConfig#EndpointPrivateAccess
   */
  readonly endpointPrivateAccess?: boolean;

  /**
   * The CIDR blocks that are allowed access to your cluster's public Kubernetes API server endpoint. Communication to the endpoint from addresses outside of the CIDR blocks that you specify is denied. The default value is 0.0.0.0/0 . If you've disabled private endpoint access and you have worker nodes or AWS Fargate pods in the cluster, then ensure that you specify the necessary CIDR blocks.
   *
   * @schema EksPropsResourcesVpcConfig#PublicAccessCidrs
   */
  readonly publicAccessCidrs?: string[];

}

/**
 * Converts an object of type 'EksPropsResourcesVpcConfig' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_EksPropsResourcesVpcConfig(obj: EksPropsResourcesVpcConfig | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'SecurityGroupIds': obj.securityGroupIds?.map(y => y),
    'SubnetIds': obj.subnetIds?.map(y => y),
    'EndpointPublicAccess': obj.endpointPublicAccess,
    'EndpointPrivateAccess': obj.endpointPrivateAccess,
    'PublicAccessCidrs': obj.publicAccessCidrs?.map(y => y),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * The encryption configuration for the cluster.
 *
 * @schema EncryptionConfigEntry
 */
export interface EncryptionConfigEntry {
  /**
   * Specifies the resources to be encrypted. The only supported value is \\"secrets\\".
   *
   * @schema EncryptionConfigEntry#Resources
   */
  readonly resources?: string[];

  /**
   * @schema EncryptionConfigEntry#Provider
   */
  readonly provider?: Provider;

}

/**
 * Converts an object of type 'EncryptionConfigEntry' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_EncryptionConfigEntry(obj: EncryptionConfigEntry | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'Resources': obj.resources?.map(y => y),
    'Provider': toJson_Provider(obj.provider),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema EksPropsKubernetesApiAccess
 */
export interface EksPropsKubernetesApiAccess {
  /**
   * @schema EksPropsKubernetesApiAccess#Roles
   */
  readonly roles?: KubernetesApiAccessEntry[];

  /**
   * @schema EksPropsKubernetesApiAccess#Users
   */
  readonly users?: KubernetesApiAccessEntry[];

}

/**
 * Converts an object of type 'EksPropsKubernetesApiAccess' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_EksPropsKubernetesApiAccess(obj: EksPropsKubernetesApiAccess | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'Roles': obj.roles?.map(y => toJson_KubernetesApiAccessEntry(y)),
    'Users': obj.users?.map(y => toJson_KubernetesApiAccessEntry(y)),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema EksPropsTags
 */
export interface EksPropsTags {
  /**
   * @schema EksPropsTags#Value
   */
  readonly value: string;

  /**
   * @schema EksPropsTags#Key
   */
  readonly key: string;

}

/**
 * Converts an object of type 'EksPropsTags' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_EksPropsTags(obj: EksPropsTags | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'Value': obj.value,
    'Key': obj.key,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * AWS Key Management Service (AWS KMS) customer master key (CMK). Either the ARN or the alias can be used.
 *
 * @schema Provider
 */
export interface Provider {
  /**
   * Amazon Resource Name (ARN) or alias of the customer master key (CMK). The CMK must be symmetric, created in the same region as the cluster, and if the CMK was created in a different account, the user must have access to the CMK.
   *
   * @schema Provider#KeyArn
   */
  readonly keyArn?: string;

}

/**
 * Converts an object of type 'Provider' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Provider(obj: Provider | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'KeyArn': obj.keyArn,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema KubernetesApiAccessEntry
 */
export interface KubernetesApiAccessEntry {
  /**
   * @schema KubernetesApiAccessEntry#Arn
   */
  readonly arn?: string;

  /**
   * @schema KubernetesApiAccessEntry#Username
   */
  readonly username?: string;

  /**
   * @schema KubernetesApiAccessEntry#Groups
   */
  readonly groups?: string[];

}

/**
 * Converts an object of type 'KubernetesApiAccessEntry' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_KubernetesApiAccessEntry(obj: KubernetesApiAccessEntry | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'Arn': obj.arn,
    'Username': obj.username,
    'Groups': obj.groups?.map(y => y),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */
"
`;

exports[`if "toJson" is disabled, toJson functions are not generated 1`] = `
"/**
 * @schema Foo
 */
export interface Foo {
  /**
   * @schema Foo#bar
   */
  readonly bar?: string;

}
"
`;

exports[`primitives 1`] = `
"/**
 * @schema fqn.of.TestType
 */
export interface TestType {
  /**
   * @schema fqn.of.TestType#stringValue
   */
  readonly stringValue?: string;

  /**
   * @schema fqn.of.TestType#booleanValue
   */
  readonly booleanValue?: boolean;

  /**
   * @schema fqn.of.TestType#dateValue
   */
  readonly dateValue?: Date;

  /**
   * @schema fqn.of.TestType#dateValueImplicitType
   */
  readonly dateValueImplicitType?: Date;

  /**
   * @schema fqn.of.TestType#anyValue
   */
  readonly anyValue?: any;

  /**
   * @schema fqn.of.TestType#nullValue
   */
  readonly nullValue?: any;

  /**
   * @schema fqn.of.TestType#numberValue
   */
  readonly numberValue?: number;

  /**
   * @schema fqn.of.TestType#integerValue
   */
  readonly integerValue?: number;

}

/**
 * Converts an object of type 'TestType' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_TestType(obj: TestType | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'stringValue': obj.stringValue,
    'booleanValue': obj.booleanValue,
    'dateValue': obj.dateValue?.toISOString(),
    'dateValueImplicitType': obj.dateValueImplicitType?.toISOString(),
    'anyValue': obj.anyValue,
    'nullValue': obj.nullValue,
    'numberValue': obj.numberValue,
    'integerValue': obj.integerValue,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */
"
`;

exports[`structs array of structs is considered optional 1`] = `
"/**
 * @schema fqn.of.TestType
 */
export interface TestType {
  /**
   * @schema fqn.of.TestType#shouldBeRequired
   */
  readonly shouldBeRequired?: ItemType;

  /**
   * @schema fqn.of.TestType#mapShouldBeOptional
   */
  readonly mapShouldBeOptional?: { [key: string]: ItemType };

  /**
   * @schema fqn.of.TestType#arrayShouldBeOptional
   */
  readonly arrayShouldBeOptional?: ItemType[];

}

/**
 * Converts an object of type 'TestType' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_TestType(obj: TestType | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'shouldBeRequired': toJson_ItemType(obj.shouldBeRequired),
    'mapShouldBeOptional': ((obj.mapShouldBeOptional) === undefined) ? undefined : (Object.entries(obj.mapShouldBeOptional).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: toJson_ItemType(i[1]) }), {})),
    'arrayShouldBeOptional': obj.arrayShouldBeOptional?.map(y => toJson_ItemType(y)),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema ItemType
 */
export interface ItemType {
  /**
   * @schema ItemType#requiredField
   */
  readonly requiredField: string;

}

/**
 * Converts an object of type 'ItemType' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ItemType(obj: ItemType | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'requiredField': obj.requiredField,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */
"
`;

exports[`structs has a field that references another struct (with required fields) 1`] = `
"/**
 * @schema fqn.of.TestType
 */
export interface TestType {
  /**
   * @schema fqn.of.TestType#other
   */
  readonly other?: Other;

}

/**
 * Converts an object of type 'TestType' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_TestType(obj: TestType | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'other': toJson_Other(obj.other),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema Other
 */
export interface Other {
  /**
   * @schema Other#stringValue
   */
  readonly stringValue: string;

}

/**
 * Converts an object of type 'Other' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_Other(obj: Other | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'stringValue': obj.stringValue,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */
"
`;

exports[`structs has primitive types and collections of primitive types 1`] = `
"/**
 * @schema fqn.of.TestType
 */
export interface TestType {
  /**
   * @schema fqn.of.TestType#stringValue
   */
  readonly stringValue?: string;

  /**
   * @schema fqn.of.TestType#boolValue
   */
  readonly boolValue?: boolean;

  /**
   * @schema fqn.of.TestType#numberValue
   */
  readonly numberValue?: number;

  /**
   * @schema fqn.of.TestType#integerValue
   */
  readonly integerValue?: number;

  /**
   * @schema fqn.of.TestType#arrayOfString
   */
  readonly arrayOfString?: string[];

}

/**
 * Converts an object of type 'TestType' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_TestType(obj: TestType | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'stringValue': obj.stringValue,
    'boolValue': obj.boolValue,
    'numberValue': obj.numberValue,
    'integerValue': obj.integerValue,
    'arrayOfString': obj.arrayOfString?.map(y => y),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */
"
`;

exports[`structs if we have "properties" and "type" is omitted, it is considered a struct 1`] = `
"/**
 * @schema fqn.of.TestType
 */
export interface TestType {
  /**
   * @schema fqn.of.TestType#foo
   */
  readonly foo?: string;

}

/**
 * Converts an object of type 'TestType' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_TestType(obj: TestType | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'foo': obj.foo,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */
"
`;

exports[`structs includes required fields 1`] = `
"/**
 * @schema fqn.of.TestType
 */
export interface TestType {
  /**
   * Minimum number of seconds for which a newly created pod should be ready without any of its container crashing, for it to be considered available. Defaults to 0 (pod will be considered available as soon as it is ready)
   *
   * @default 0 (pod will be considered available as soon as it is ready)
   * @schema fqn.of.TestType#minReadySeconds
   */
  readonly minReadySeconds: number;

  /**
   * Indicates that the deployment is paused.
   *
   * @schema fqn.of.TestType#paused
   */
  readonly paused?: boolean;

  /**
   * The maximum time in seconds for a deployment to make progress before it is considered to be failed. The deployment controller will continue to process failed deployments and a condition with a ProgressDeadlineExceeded reason will be surfaced in the deployment status. Note that progress will not be estimated during the time a deployment is paused. Defaults to 600s.
   *
   * @default 600s.
   * @schema fqn.of.TestType#progressDeadlineSeconds
   */
  readonly progressDeadlineSeconds?: number;

  /**
   * Number of desired pods. This is a pointer to distinguish between explicit zero and not specified. Defaults to 1.
   *
   * @default 1.
   * @schema fqn.of.TestType#replicas
   */
  readonly replicas?: number;

  /**
   * The number of old ReplicaSets to retain to allow rollback. This is a pointer to distinguish between explicit zero and not specified. Defaults to 10.
   *
   * @default 10.
   * @schema fqn.of.TestType#revisionHistoryLimit
   */
  readonly revisionHistoryLimit: number;

  /**
   * @schema fqn.of.TestType#NonCamelCaseRequired
   */
  readonly nonCamelCaseRequired: string;

}

/**
 * Converts an object of type 'TestType' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_TestType(obj: TestType | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'minReadySeconds': obj.minReadySeconds,
    'paused': obj.paused,
    'progressDeadlineSeconds': obj.progressDeadlineSeconds,
    'replicas': obj.replicas,
    'revisionHistoryLimit': obj.revisionHistoryLimit,
    'NonCamelCaseRequired': obj.nonCamelCaseRequired,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */
"
`;

exports[`structs references itself 1`] = `
"/**
 * @schema fqn.of.TestType
 */
export interface TestType {
  /**
   * @schema fqn.of.TestType#entrypoint
   */
  readonly entrypoint?: MyType;

}

/**
 * Converts an object of type 'TestType' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_TestType(obj: TestType | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'entrypoint': toJson_MyType(obj.entrypoint),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema MyType
 */
export interface MyType {
  /**
   * @schema MyType#self
   */
  readonly self?: MyType;

}

/**
 * Converts an object of type 'MyType' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_MyType(obj: MyType | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'self': toJson_MyType(obj.self),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */
"
`;

exports[`type aliases alias to a custom type 1`] = `
"// this is NewType

/**
 * @schema TypeB
 */
export interface TypeB {
  /**
   * @schema TypeB#refToTypeA
   */
  readonly refToTypeA?: NewType;

}

/**
 * Converts an object of type 'TypeB' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_TypeB(obj: TypeB | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'refToTypeA': obj.refToTypeA,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */
"
`;

exports[`type aliases alias to a definition 1`] = `
"/**
 * @schema TypeA
 */
export interface TypeA {
  /**
   * @schema TypeA#ref
   */
  readonly ref?: TypeC;

}

/**
 * Converts an object of type 'TypeA' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_TypeA(obj: TypeA | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'ref': toJson_TypeC(obj.ref),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema TypeC
 */
export interface TypeC {
  /**
   * @schema TypeC#field
   */
  readonly field?: string;

}

/**
 * Converts an object of type 'TypeC' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_TypeC(obj: TypeC | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'field': obj.field,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */
"
`;

exports[`unions constraints are ignored for objects 1`] = `
"/**
 * @schema TestType
 */
export interface TestType {
  /**
   * Fault injection policy to apply on HTTP traffic at
   * the client side.
   *
   * @schema TestType#fault
   */
  readonly fault?: TestTypeFault;

}

/**
 * Converts an object of type 'TestType' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_TestType(obj: TestType | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'fault': toJson_TestTypeFault(obj.fault),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Fault injection policy to apply on HTTP traffic at
 * the client side.
 *
 * @schema TestTypeFault
 */
export interface TestTypeFault {
  /**
   * @schema TestTypeFault#delay
   */
  readonly delay?: TestTypeFaultDelay;

}

/**
 * Converts an object of type 'TestTypeFault' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_TestTypeFault(obj: TestTypeFault | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'delay': toJson_TestTypeFaultDelay(obj.delay),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema TestTypeFaultDelay
 */
export interface TestTypeFaultDelay {
  /**
   * @schema TestTypeFaultDelay#exponentialDelay
   */
  readonly exponentialDelay?: string;

  /**
   * Add a fixed delay before forwarding the request.
   *
   * @schema TestTypeFaultDelay#fixedDelay
   */
  readonly fixedDelay?: string;

  /**
   * Percentage of requests on which the delay
   * will be injected (0-100).
   *
   * @schema TestTypeFaultDelay#percent
   */
  readonly percent?: number;

  /**
   * Percentage of requests on which the delay
   * will be injected.
   *
   * @schema TestTypeFaultDelay#percentage
   */
  readonly percentage?: TestTypeFaultDelayPercentage;

}

/**
 * Converts an object of type 'TestTypeFaultDelay' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_TestTypeFaultDelay(obj: TestTypeFaultDelay | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'exponentialDelay': obj.exponentialDelay,
    'fixedDelay': obj.fixedDelay,
    'percent': obj.percent,
    'percentage': toJson_TestTypeFaultDelayPercentage(obj.percentage),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Percentage of requests on which the delay
 * will be injected.
 *
 * @schema TestTypeFaultDelayPercentage
 */
export interface TestTypeFaultDelayPercentage {
  /**
   * @schema TestTypeFaultDelayPercentage#value
   */
  readonly value?: number;

}

/**
 * Converts an object of type 'TestTypeFaultDelayPercentage' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_TestTypeFaultDelayPercentage(obj: TestTypeFaultDelayPercentage | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'value': obj.value,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */
"
`;

exports[`unions include primitives 1`] = `
"/**
 * @schema fqn.of.TestType
 */
export class TestType {
  public static fromString(value: string): TestType {
    return new TestType(value);
  }
  public static fromNumber(value: number): TestType {
    return new TestType(value);
  }
  private constructor(public readonly value: any) {
    Object.defineProperty(this, 'resolve', { value: () => value });
  }
}
"
`;
